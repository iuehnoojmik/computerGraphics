/*************************************************************************/
/*                HW#3-2  Keyboard Callback 응용2	   				     */
/*  작성자 : 김준희                              날짜 : 2022년 10월 7일  */
/*																		 */
/* 문제 정의 : 키보드 콜백 함수를 이용하여								 */
/*	특정 키보드의 키를 누르면 도형을 이동 또는 확대 또는 축소하도록 한다 */
/*									                                     */
/* 기능: 위쪽방향키: 도형을 0.1만큼 위로 이동						     */
/*       아래쪽방향키: 도형을 0.1만큼 아래로 이동				         */
/*       왼쪽방향키: 도형을 0.1만큼 왼쪽으로 이동				         */
/*       오른쪽방향키: 도형을 0.1만큼 오른쪽으로 이동				     */
/*          ㄴ이동 중에 윈도우 창을 벗어나지 않는다                      */
/*       PageUp: 도형을 상하좌우로 0.1만큼 확대						     */
/*          ㄴ확대 중에 윈도우 창을 벗어나지 않는다         		     */
/*       PageDown: 도형을 상하좌우로 0.1만큼 축소				         */
/*          ㄴ사각형은 각 변이 0.2보다 작아지지 않는다        		     */
/*                - - - - - - -                                          */
/*************************************************************************/
#include <GL/glut.h>

float px, py = 0.0; //사각형이 이동할 y좌표 전역변수
float mx, my = 0.0; //사각형이 이동할 x좌표 전역변수 
//확대와 축소를 위하여 증가할x,y변수와 감소할x,y변수를 따로 선언

void MyInit() {
	glClearColor(1.0, 1.0, 1.0, 1.0);  //배경색상-흰색

	glMatrixMode(GL_PROJECTION); //투영행렬 선택
	glLoadIdentity(); //투영행렬 초기화

	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0); //가시부피 영역 설정
}

void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT); //색 버퍼 제거
	glColor3f(0.5, 0.5, 0.5); //모델 색상 지정 - 회색

	glBegin(GL_POLYGON); //다각형 모델링
	glVertex3f(-0.5 + mx, -0.5 + my, 0.0); //왼쪽 아래
	glVertex3f(0.5 + px, -0.5 + my, 0.0); //오른쪽 아래
	glVertex3f(0.5 + px, 0.5 + py, 0.0); //오른쪽 위
	glVertex3f(-0.5 + mx, 0.5 + py, 0.0); //왼쪽 위
	glEnd();
	glFlush();
}

void MySpecial(int key, int x, int y) {
	switch (key) {
	case GLUT_KEY_UP: //위쪽 방향키
		py += 0.1; //y좌표 전역변수들을 0.1씩 증가시켜서 도형을 위로 이동
		my += 0.1;
		if (py > 0.5) { //y전역변수들이 0.5보다 커지면(윈도우 창 위쪽에 닿으면)
			py -= 0.1; //좌표전역변수를 0.1만큼 다시 줄여서 윈도우 창을 벗어나지 않도록 한다
			my -= 0.1;
		}
		break;
	case GLUT_KEY_DOWN: //아래쪽 방향키
		py -= 0.1; //y좌표 전역변수들을 0.1씩 감소시켜서 도형을 아래로 이동
		my -= 0.1;
		if (my < -0.5) { //y전역변수들이 -0.5보다 작아지면(윈도우 창 아래쪽에 닿으면)
			py += 0.1; //좌표전역변수를 0.1만큼 다시 증가시켜서 윈도우 창을 벗어나지 않도록 한다
			my += 0.1;
		}
		break;
	case GLUT_KEY_LEFT: //왼쪽 방향키
		px -= 0.1; //x좌표 전역변수들을 0.1씩 감소시켜서 도형을 왼쪽으로 이동
		mx -= 0.1;
		if (mx < -0.5) { //x전역변수들이 -0.5보다 작아지면(윈도우 창 왼쪽에 닿으면)
			mx += 0.1; //좌표전역변수를 0.1만큼 다시 증가시켜서 윈도우 창을 벗어나지 않도록 한다
			px += 0.1;
		}
		break;
	case GLUT_KEY_RIGHT: //왼쪽 방향키
		px += 0.1; //x좌표 전역변수들을 0.1씩 증가시켜서 도형을 오른쪽으로 이동
		mx += 0.1;
		if (px > 0.5) { //x전역변수들이 0.5보다 커지면(윈도우 창 오른쪽에 닿으면)
			mx -= 0.1; //좌표전역변수를 0.1만큼 다시 감소시켜서 윈도우 창을 벗어나지 않도록 한다
			px -= 0.1;
		}
		break;
	case GLUT_KEY_PAGE_UP: //PgUp 키
		mx -= 0.1; //왼쪽의 x좌표들은 -0.1만큼 증가
		px += 0.1; //오른쪽의 x좌표들은 0.1만큼 증가
		my -= 0.1; //아래쪽의 y좌표들은 -0.1만큼 증가
		py += 0.1; //위쪽의 y좌표들은 0.1만큼 증가
		//사각형을 상하좌우로 0.1만큼 커지게 한다

		if (mx < -0.5 || px > 0.5 || my < -0.5 || py > 0.5) { //전역변수들이 0.5보다 커지면 >> 윈도우 창 한쪽이라도 닿으면
			mx += 0.1;  //좌표전역변수를 0.1만큼 역연산 시켜서 윈도우 창을 벗어나 사각형이 커지는 것을 막는다
			px -= 0.1;
			my += 0.1;
			py -= 0.1;
			break;
		}
		break;
	case GLUT_KEY_PAGE_DOWN: //PgDn 키
		if (mx - px > 0.8) //사각형의 좌표차이가 0.8보다 커진다=사각형 한 변의 길이가 0.2보다 작아진다
			break; //케이스를 빠져나가서 사각형이 0.2보다 작아지지 않도록 한다
		mx += 0.1; //사각형 한 변이 0.2보다 크다면 사각형을 상하좌우로 0.1만큼 작아지도록 한다
		px -= 0.1;
		my += 0.1;
		py -= 0.1;
		break;
	default:
		break;
	}
	glutPostRedisplay(); //디스플레이 함수 강제 호출 함수
}

int main(int argc, char** argv) {
	glutInit(&argc, argv); //window랑 os연결
	glutInitDisplayMode(GLUT_RGB); //디스플레이 모드 설정
	glutInitWindowSize(300, 300); //윈도우크기 설정
	glutInitWindowPosition(0, 0); //시작 지점 설정
	glutCreateWindow("Keyboard Callback 2"); //윈도우 생성(이름)

	MyInit(); //윈도우 초기화
	glutDisplayFunc(MyDisplay); //디스플레이 콜백함수
	glutSpecialFunc(MySpecial); //특수키를 입력받는 키보드 기능 콜백 함수 등록

	glutMainLoop();
	return 0;
}